Index: MergedSetRegistration.cpp
===================================================================
--- MergedSetRegistration.cpp	(revision 0)
+++ MergedSetRegistration.cpp	(working copy)
@@ -0,0 +1,86 @@
+//Current headers
+#include "common.h"
+#include "MergedSetRegistration.h"
+#include "Track.h"
+//Boost headers
+#include <boost/lexical_cast.hpp>
+#include <boost/property_tree/ptree.hpp>
+#include <boost/tuple/tuple.hpp>
+#include "parameters.h"
+//PCL headers
+#include <pcl/kdtree/kdtree_flann.h>
+#include <pcl/registration/transformation_estimation_lm.h>
+#include <pcl/registration/warp_point_rigid_3d.h>
+#include <pcl/registration/icp.h>
+#include <pcl/registration/ia_ransac.h>
+#include <pcl/registration/icp_nl.h>
+#include <pcl/point_cloud.h>
+#include <pcl/point_types.h>
+#include <pcl/registration/registration.h>
+#include <Eigen/Eigen>
+#include <Eigen/Core>
+#include <Eigen/Geometry>
+#include<Eigen/StdVector>
+//Other headers
+#include <vector>
+#include <deque>
+#include <iostream>
+#include <tuple>
+
+
+using namespace std;
+typedef std::vector<FrameType, Eigen::aligned_allocator<FrameType> > PointCloudCollection;
+typedef std::pair<PointCloud3D::Ptr, Matrix4fUnaligned> FrameType;
+
+
+
+namespace Tracking
+{
+	MergedSetRegistration::MergedSetRegistration(void)
+	{
+	}
+	MergedSetRegistration::~MergedSetRegistration()
+	{
+	}
+	bool MergedSetRegistration::RegisterInternal(Track *track, PointCloud3D::Ptr keypoints)
+	{
+		//RegistrationMethodBase::RegisterInternal(track, keypoints);
+		double fitnessMerged1, fitnessMerged2;
+		Eigen::Matrix4f transformMerged;
+		bool converged1, converged2;
+		PointCloud3D::Ptr targetCloud(new PointCloud3D());
+		targetCloud = track->GetmergedPointCloud();
+		Eigen::Matrix4f transform;
+		transform = GetlastTransform();
+		// Forward registration - keypoints to merged cloud.
+		converged1 = PerformRegistration(keypoints, targetCloud, fitnessMerged1, transformMerged, transform);
+		converged1&= CheckForConvergedPoints(track, keypoints, transformMerged);
+		// Added to eliminate X axis rotations.
+		converged1 &= CheckForAngleToXAxis(transformMerged);
+		//	WRITE_TO_DEBUG("\nAlignment to merged: " << converged1 << " " << fitnessMerged1 << " " << transformMerged(0, 3) << " " << transformMerged(1, 3) << endl);
+		// Test if forward registration converged.
+		if (converged1)
+		{
+			// Yeah, return true.
+			this->SetlastTransform(transformMerged);
+			this->SetFitness(fitnessMerged1);
+			return true;
+		}
+		// Forward failed. Try reverse.
+		converged2 = PerformRegistration(targetCloud, keypoints, fitnessMerged2, transformMerged, transform);
+		converged2&= CheckForConvergedPoints(track, keypoints, transformMerged);
+		//	WRITE_TO_DEBUG("\nAlignment to merged: " << converged2 << " " << fitnessMerged2 << " " << transformMerged(0, 3) << " " << transformMerged(1, 3) << endl);
+		// Added to eliminate X axis rotations.
+		converged2 &= CheckForAngleToXAxis(transformMerged);
+
+		// Check for reverse's success
+		if (converged2)
+		{
+			// Works, return true.
+			this->SetlastTransform(transformMerged);
+			this->SetFitness(fitnessMerged2);
+		}
+		// Neither worked, so return false.
+		return false;
+	}
+}
\ No newline at end of file
Index: MergedSetRegistration.h
===================================================================
--- MergedSetRegistration.h	(revision 0)
+++ MergedSetRegistration.h	(working copy)
@@ -0,0 +1,16 @@
+#pragma once
+#include "common.h"
+#include "Registration.h"
+#include "Track.h"
+using namespace std;
+
+namespace Tracking
+{
+	class MergedSetRegistration : public RegistrationMethodBase
+	{
+	public:
+		MergedSetRegistration(void);
+		~MergedSetRegistration();
+		virtual bool RegisterInternal(Track *track, PointCloud3D::Ptr keypoints) override ;	
+	};
+}
\ No newline at end of file
Index: Registration.cpp
===================================================================
--- Registration.cpp	(revision 0)
+++ Registration.cpp	(working copy)
@@ -0,0 +1,348 @@
+//Current headers
+#include "common.h"
+#include "Registration.h"
+//Boost headers
+#include <boost/lexical_cast.hpp>
+#include <boost/property_tree/ptree.hpp>
+#include <boost/tuple/tuple.hpp>
+#include "parameters.h"
+//PCL headers
+#include <pcl/kdtree/kdtree_flann.h>
+#include <pcl/registration/transformation_estimation_lm.h>
+#include <pcl/registration/warp_point_rigid_3d.h>
+#include <pcl/registration/icp.h>
+#include <pcl/registration/ia_ransac.h>
+#include <pcl/registration/icp_nl.h>
+#include <pcl/point_cloud.h>
+#include <pcl/point_types.h>
+#include <pcl/registration/registration.h>
+#include <Eigen/Eigen>
+#include <Eigen/Core>
+#include <Eigen/Geometry>
+#include<Eigen/StdVector>
+#include <Eigen/Eigen>
+#include <Eigen/Core>
+#include <Eigen/Geometry>
+//Other headers
+#include <vector>
+#include <deque>
+#include <iostream>
+#include <tuple>
+// Local headers
+#include "TransformInterpolation.h"
+#include "VTKPCLBridge.h"
+
+using namespace std;
+typedef std::vector<FrameType, Eigen::aligned_allocator<FrameType> > PointCloudCollection;
+typedef std::pair<PointCloud3D::Ptr, Matrix4fUnaligned> FrameType;
+typedef std::pair<double,double> fitness_nr;
+//A kdTree pointer
+typedef pcl::KdTreeFLANN<pcl::PointXYZ> kdTree_;
+namespace Tracking
+{
+	RegistrationMethodBase::RegistrationMethodBase(void)
+	{
+		RegistrationMethodPtr icp(new pcl::IterativeClosestPoint<pcl::PointXYZ, pcl::PointXYZ>);
+		this->registrationMethod = icp;
+		this->lastTransform.setIdentity();
+		this->shuffle = true;
+		this->skipAdding = false;
+		this->euclideanFitnessEpsilon = 0.8;
+		this->maximumFitness = 0.5;
+		this->maximumIterations = 250;
+		this->maxCorrespondenceDistance = 5;
+		this->rANSACIterations = 10.0;
+		this->transformationEpsilon = 1.0;
+		this->maxRange = 3;
+		this->defaultPercentageofPoints = 60;
+		this->angletoAxis = 5; //Removes angle thing to come inside merge
+	}
+	RegistrationMethodBase::~RegistrationMethodBase()
+	{
+	}
+	void RegistrationMethodBase::SetAngletoAxis(double angle)
+	{
+		this->angletoAxis = angle;
+	}
+	double RegistrationMethodBase::GetAngletoAxis()
+	{
+		return this->angletoAxis;
+	}
+	void RegistrationMethodBase::SetDefaultPercentageOfPoints(double defaultPercentageofPoints)
+	{
+		this->defaultPercentageofPoints = defaultPercentageofPoints;
+	}
+	double RegistrationMethodBase::GetDefaultPercentageOfPoints()
+	{
+		return this->defaultPercentageofPoints;
+	}
+	void RegistrationMethodBase::SetMaxRange(double maxRange)
+	{
+		this->maxRange = maxRange;
+	}
+	double RegistrationMethodBase::GetMaxRange()
+	{
+		return this->maxRange;
+	}
+	void RegistrationMethodBase::SetEuclideanFitnessEpsilon(float epsilon)
+	{
+		this->euclideanFitnessEpsilon = epsilon;
+		this->registrationMethod->setEuclideanFitnessEpsilon(this->euclideanFitnessEpsilon);
+	}
+	void RegistrationMethodBase::SetskipAdding(bool value)
+	{
+		this->skipAdding = value;
+	}
+	void RegistrationMethodBase::Setshuffle(bool value)
+	{
+		this->shuffle = value;
+	}
+	void RegistrationMethodBase::SetMaximumIterations(int maximumIterations)
+	{
+		this->maximumIterations = maximumIterations;
+		this->registrationMethod->setMaximumIterations(this->maximumIterations);
+	}
+	void RegistrationMethodBase::SetMaxCorrespondenceDistance(float distance)
+	{
+		this->maxCorrespondenceDistance = distance;
+		this->registrationMethod->setMaxCorrespondenceDistance(this->maxCorrespondenceDistance);
+	}
+	void RegistrationMethodBase::SetRANSACIterations(float iterations)
+	{
+		this->rANSACIterations = iterations;
+		this->registrationMethod->setRANSACIterations(this->rANSACIterations);
+	}
+	void RegistrationMethodBase::SetTransformationEpsilon(float transformationEpsilon)
+	{
+		this->transformationEpsilon = transformationEpsilon;
+		this->registrationMethod->setTransformationEpsilon(this->transformationEpsilon);
+	}
+	double RegistrationMethodBase::GetmaximumFitness()
+	{
+		return this->maximumFitness;
+	}
+	void RegistrationMethodBase::SetmaximumFitness(double maximumFitness)
+	{
+		this->maximumFitness = maximumFitness;
+	}
+	bool RegistrationMethodBase::GetskipAdding()
+	{
+		return this->skipAdding;
+	}
+
+	bool RegistrationMethodBase::Getshuffle()
+	{
+		return this->shuffle;
+	}
+
+	double RegistrationMethodBase::GetFitness()
+	{
+		return this->fitness;
+	}
+	void RegistrationMethodBase::SetFitness(double fitness)
+	{
+		this->fitness = fitness;
+	}
+	Eigen::Matrix4f RegistrationMethodBase::GetlastTransform()
+	{
+		return this->lastTransform;
+	}	
+	void RegistrationMethodBase::SetlastTransform(Eigen::Matrix4f &transform)
+	{
+		this->lastTransform = transform;
+
+	}
+	struct TransformSimilarityCheckFunctor
+	{
+		Eigen::Matrix4f & matrix;
+		TransformSimilarityCheckFunctor(Eigen::Matrix4f & matrix)
+			: matrix(matrix)
+		{
+		}
+		bool operator()(FrameType & frame)
+		{
+			Eigen::Matrix4f a = frame.second;
+			
+			Eigen::Matrix4f difference = this->matrix - a;
+			for (int i = 0; i < 4; i++)
+			{
+				for (int j = 0; j < 4; j++)
+				{
+					if (fabs(difference(i, j)) > 1e-2)
+					{
+						return false;
+					}
+				}
+			}
+			return true;
+		}
+	};
+	bool RegistrationMethodBase::CheckForSimilarTransforms(PointCloudCollection::iterator start, PointCloudCollection::iterator end, Eigen::Matrix4f &transform)
+	{
+		PointCloudCollection::iterator found = std::find_if(start, end, TransformSimilarityCheckFunctor(transform));
+		return found != end;
+	}
+	/** A functor to check the similarity between two transforms. This can be used to check for similar transforms.
+	The current implementation is a simple check of the absolute difference between the
+	two transform.
+	*/
+	bool RegistrationMethodBase::RegisterInternal(Track *track, PointCloud3D::Ptr keypoints)
+	{
+		return true;
+	}
+	void RegistrationMethodBase::SetNumberOfFramesForAlignment(int numberOfFrames)
+	{
+	}
+	fitness_nr RegistrationMethodBase::GetFitnessScore(double maxLimit, PointCloud3D::Ptr inputTransformedCloud, PointCloud3D::Ptr inputTarget)
+	{
+		kdTree_::Ptr theTree(new kdTree_());
+		theTree->setInputCloud(inputTarget);
+		double fitness_score = 0.0;
+		// Transform the input dataset using the final transformation
+		//PointCloudSource input_transformed;
+		//transformPointCloud (*input_, input_transformed, final_transformation_);
+
+		std::vector<int> nn_indices (1);
+		std::vector<float> nn_dists (1);
+
+		// For each point in the source dataset
+		double nr = 0;
+		for (size_t i = 0; i < inputTransformedCloud->size (); ++i)
+		{
+			Eigen::Vector4f p1 = Eigen::Vector4f (inputTransformedCloud->points[i].x,
+				inputTransformedCloud->points[i].y,
+				inputTransformedCloud->points[i].z, 0);
+			// Find its nearest neighbor in the target
+
+			theTree->nearestKSearch (inputTransformedCloud->points[i], 1, nn_indices, nn_dists);
+			// Deal with occlusions (incomplete targets)
+			if (nn_dists[0] > maxLimit)
+				continue;
+
+			Eigen::Vector4f p2 = Eigen::Vector4f (inputTarget->points[nn_indices[0]].x,
+				inputTarget->points[nn_indices[0]].y,
+				inputTarget->points[nn_indices[0]].z, 0);
+			// Calculate the fitness score
+			fitness_score += fabs ((p1-p2).squaredNorm ());
+			nr++;	
+		}  
+
+		/* Check whether nr satisfies atleast 60-80% of the total number of points in the input cloud
+		or not pass on the fitness score as well as nr value to main and then check */
+		if (nr > 0)
+		{
+			fitness_score = fitness_score/nr;
+			fitness_nr thePair(fitness_score,nr);
+			return thePair;
+		}
+		else
+		{
+			return fitness_nr(-1, 0);
+		}
+	}
+
+	
+	bool RegistrationMethodBase::Register(Track *track, PointCloud3D::Ptr keypoints)
+	{
+		bool accept = this->RegisterInternal(track, keypoints);
+		if (!accept)
+			return false;
+		PointCloudCollection::iterator startIt = track->GetFrameCollection().begin();
+		accept = !(this->CheckForSimilarTransforms(startIt, track->GetFrameCollection().end(), this->GetlastTransform()));
+
+		/*WRITE_TO_DEBUG(endl <<  "Accept: " << accept << " ");
+		WRITE_TO_DEBUG(this->GetFitness()<< " " << this->GetlastTransform()(0, 3) << " " << this->GetlastTransform()(1,3) << " ");*/
+
+		if (accept && !this->GetskipAdding())
+		{
+			// Since there was some convergence(s) and the transform was non-equal, 
+			// push the keypoints and calculated transform as a new frame.
+			FrameType pair = std::make_pair(keypoints, Matrix4fUnaligned(this->GetlastTransform()));
+			
+			track->pushbackFrameCollection(pair);
+			track->AppendMergedPoints(pair);
+		}
+		return true;
+	}
+	
+	bool RegistrationMethodBase::CheckForAngleToXAxis(Eigen::Matrix4f &transform)
+	{
+		Eigen::Vector3f xAxis = Eigen::Vector3f::UnitX();
+		Eigen::Vector3f newX = Eigen::Affine3f(transform).rotation() * xAxis;
+		float angle = fabs(acos(newX.dot(xAxis)))* 180.0 / M_PI;
+		//WRITE_TO_DEBUG("\nAngle to X Axis:" << angle << endl);
+	}
+
+	bool RegistrationMethodBase::CheckForConvergedPoints(Track *track, PointCloud3D::Ptr keypoints, Eigen::Matrix4f & matrix)
+	{
+		Eigen::Affine3f transform(matrix);
+		vector<int> indices;
+		vector<float> dists;
+		int nCoincident = 0;
+		//pcl::KdTreeFLANN<pcl::PointXYZ> kdtreemergedPoints;
+	//	kdtreemergedPoints = pcl::KdTreeFLANN<pcl::PointXYZ>();
+		//kdtreemergedPoints = track->GetmergedPointKDTree();
+		for (PointCloud3D::iterator pt = keypoints->begin(); pt != keypoints->end(); ++pt)
+		{
+			pcl::PointXYZ ptTransformed = pcl::transformPoint(*pt, transform);
+			float tol = track->GetTolerance();
+			int nClosest =track->GetnClosePoints(&ptTransformed, tol, indices, dists);
+			if (nClosest > 0)
+				nCoincident++;
+		}
+	//	WRITE_TO_DEBUG("\nChecking for converged points: " << nCoincident);
+		return nCoincident > 0;//0.5 * keypoints->size();
+	}
+
+	/** Perform a registration between two frames
+	* @return True if converged, false if not.
+	* @param frame1 The first frame to register
+	* @param frame2 The second frame to register
+	* @param fitness Out-parameter containing the fitness of the registration (closer to 0 is better)
+	* @param transform Out-parameter containing the final transform from the registration. Invalid if return is false.
+	* @param initial The initial transform to use for registration.
+	*/
+	bool RegistrationMethodBase::PerformRegistration(PointCloud3D::Ptr frame1, PointCloud3D::Ptr frame2, double & fitness, Eigen::Matrix4f & transform, Eigen::Matrix4f & initial)
+	{
+		// First, try with initial guess 'initial'.		
+		this->registrationMethod->setInputCloud(frame1);
+		double totalNumberofPoints = frame1->size();
+		this->registrationMethod->setInputTarget(frame2);
+		PointCloud3D::Ptr aligned(new PointCloud3D);
+		this->registrationMethod->align(*aligned, initial);
+		bool converged = this->registrationMethod->hasConverged();
+		this->thePair = GetFitnessScore(maxRange, aligned, frame2);
+		this->fitness = this->thePair.first;
+		this->comparedPoints = this->thePair.second;
+		this->comparedPoints = (this->comparedPoints/totalNumberofPoints)*100;
+		//WRITE_TO_DEBUG(endl<<"Fitness:    "<<this->fitness<<"     "<<"%ge of ComparedPoints "<<nr<<" Max Range"<<maxRange<<endl);
+		// Check for convergence.
+		converged = (converged)&&(this->fitness < this->maximumFitness)&&(this->comparedPoints > this->defaultPercentageofPoints);
+		if (!converged)
+		{	
+			// No convergence.
+			// Try without initial alignment
+			this->registrationMethod->align(*aligned);
+			this->registrationMethod->setInputCloud(aligned);
+			this->registrationMethod->setInputTarget(frame2);
+			converged = this->registrationMethod->hasConverged();
+			fitness_nr thePair2;
+			thePair2 = GetFitnessScore(maxRange, aligned, frame2);
+			this->fitness = thePair2.first;
+			this->comparedPoints = thePair2.second;
+			this->comparedPoints = (this->comparedPoints/totalNumberofPoints)*100;
+			converged = (converged)&&(this->fitness < this->maximumFitness)&&(this->comparedPoints > this->defaultPercentageofPoints);
+		}
+		if (converged)
+		{
+			// Either method worked. Set transform appropriately.
+			transform = this->registrationMethod->getFinalTransformation();
+			// HACK: These lines added to break high Y translations.
+			Eigen::Vector3f origin = Eigen::Vector3f::Zero();
+			origin = Eigen::Affine3f(transform) * origin;
+			if (fabs(origin[1]) > 1)
+				return false;
+		}
+		return converged;
+	}	
+}
\ No newline at end of file
Index: Registration.h
===================================================================
--- Registration.h	(revision 0)
+++ Registration.h	(working copy)
@@ -0,0 +1,88 @@
+#pragma once
+#include "Track.h"
+#include "common.h"
+#include "TransformInterpolation.h"
+#include <vtkPolyData.h>
+#include <vtkSmartPointer.h>
+#include <pcl/point_cloud.h>
+#include <Eigen/Eigen>
+#include <Eigen/Core>
+#include <Eigen/Geometry>
+#include<Eigen/StdVector>
+#include <vtkSmartPointer.h>
+//PCL headers
+#include <pcl/kdtree/kdtree_flann.h>
+#include <pcl/registration/transformation_estimation_lm.h>
+#include <pcl/registration/warp_point_rigid_3d.h>
+#include <pcl/registration/icp.h>
+#include <pcl/registration/ia_ransac.h>
+#include <pcl/registration/icp_nl.h>
+#include <pcl/point_cloud.h>
+#include <pcl/point_types.h>
+#include <pcl/registration/registration.h>
+using namespace std;
+typedef std::pair<PointCloud3D::Ptr, Matrix4fUnaligned> FrameType;
+typedef std::vector<FrameType, Eigen::aligned_allocator<FrameType> > PointCloudCollection;
+typedef std::pair<double,double> fitness_nr;
+namespace Tracking
+{
+struct TransformSimilarityCheckFunctor;
+class RegistrationMethodBase
+{
+private:
+	RegistrationMethodPtr registrationMethod;
+	double maximumFitness;
+	// Add points to cloud or not
+	bool skipAdding;
+	// Shuffle or not
+	bool shuffle;
+	Eigen::Matrix4f lastTransform;
+	double fitness;
+	//RegistrationMethodParameters
+	float euclideanFitnessEpsilon;
+	int maximumIterations;
+	float maxCorrespondenceDistance;
+	float rANSACIterations;
+	float transformationEpsilon;
+	double maxRange;
+	double comparedPoints;
+	double defaultPercentageofPoints;
+	fitness_nr thePair;
+	double angletoAxis;
+public:
+	RegistrationMethodBase(void);
+	~RegistrationMethodBase();
+	void SetAngletoAxis(double angle);
+	double GetAngletoAxis();
+	bool GetskipAdding();
+	bool Getshuffle();
+	void SetMaxRange(double maxRange);
+	double GetMaxRange();
+	void SetskipAdding(bool value);
+	void Setshuffle(bool value);
+	void SetEuclideanFitnessEpsilon(float Epsilon);
+	void SetMaximumIterations(int maximumIterations);
+	void SetMaxCorrespondenceDistance(float distance);
+	void SetRANSACIterations(float iterations);
+	void SetTransformationEpsilon(float transformationEpsilon);
+	double GetFitness();
+	void SetFitness(double fitness);
+	void SetDefaultPercentageOfPoints(double defaultPercentageofPoints);
+	double GetDefaultPercentageOfPoints();
+	double GetmaximumFitness();
+	void SetmaximumFitness(double maximumFitness);
+	Eigen::Matrix4f GetlastTransform();
+	void SetlastTransform(Eigen::Matrix4f &transform);
+	bool PerformRegistration(PointCloud3D::Ptr frame1, PointCloud3D::Ptr frame2, double & fitness, Eigen::Matrix4f & transform, Eigen::Matrix4f & initial);	
+	bool CheckForSimilarTransforms(PointCloudCollection::iterator start, PointCloudCollection::iterator end, Eigen::Matrix4f & transform);
+	fitness_nr GetFitnessScore(double maxLimit, PointCloud3D::Ptr inputTransformedCloud, PointCloud3D::Ptr inputTarget);
+	bool CheckForAngleToXAxis(Eigen::Matrix4f & transform);
+	bool CheckForConvergedPoints(Track *track, PointCloud3D::Ptr keypoints, Eigen::Matrix4f & matrix);
+	bool Register(Track *track, PointCloud3D::Ptr keypoints);
+	virtual void SetNumberOfFramesForAlignment(int numberOfFrames);
+protected:
+	virtual bool RegisterInternal(Track *track, PointCloud3D::Ptr keypoints);
+	
+	
+};
+}
